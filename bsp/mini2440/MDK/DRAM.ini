/******************************************************************************/
/* DRAM.INI: DRAM Initialization File                                         */
/******************************************************************************/
// <<< Use Configuration Wizard in Context Menu >>>                           // 
/******************************************************************************/
/* This file is part of the uVision/ARM development tools.                    */
/* Copyright (c) 2005-2006 Keil Software. All rights reserved.                */
/* This software may only be used under the terms of a valid, current,        */
/* end user licence from KEIL for a compatible version of KEIL software       */
/* development tools. Nothing else gives you the right to use this software.  */
/******************************************************************************/
//这是自己制作的用于2440的DRAM初始化脚本

FUNC void Setup (void) {

  _WDWORD(0x4A000008, 0xFFFFFFFF);      // Disable All Interrupts

  _WDWORD(0x53000000, 0x00000000);   // WDTCON 关闭看门狗

   // Clock Setup 
 // FCLK = 300 MHz, HCLK = 100 MHz, PCLK = 50 MHz

  _WDWORD(0x4c000000, 0x0FFF0FFF);   // LOCKTIME PLL  锁定时间计数寄存器 0xFFFFFFFF

//	<h>时钟与电源控制
//		<h>CLKDIVN: 时钟分频器控制寄存器
//		<i> 控制AHB和APB总线及USB速度分频  
//		<o1.3> DIVN_UPLL: UPLL进行二分频提供给USB使用（UPLL = 96MHz).
//		<o1.1..2> HDIVN: 设置AHB总线速度与系统总线FCLK速度的分频值。
//		<0=> HCLK = FCLK
//		<1=> HCLK = FCLK/2
//		<2=> HCLK = FCLK/4(如果CAMDIVN[9](HCLK4_HALF) = 1,HCLK = FCLK/8)
//		<3=> HCLK = FCLK/3(如果CAMDIVN[8](HCLK3_HALF) = 1,HCLK = FCLK/6)
//		<o1.0> PDIVN: APB总线速度为AHB总线速度的一半。
//		</h>
  _WDWORD(0x4c000014, 0x0000000F);   // CLKDIVN   0x00000004

//		<h>MPLLCON :主时钟寄存器控制
//		<i> FOUT = 2*m*Fin/(p*2^s)  Fvco = 2*m*Fin/p  
//		<i> m=MDIV + 8  p = PDIV + 2  s = SDIV
//		<i> 600MHz<= Fvco <= 1.2GHz   200MHz <= Fout <= 600MHz
//		<o1.12..19> MDIV: 锁相环倍频数<9-256><#-8>
//		<o1.4..9>   PDIV: 锁相环预分频数 <3-64><#-2>
//		<o1.0..1>   SDIV: 锁相环后分频数 <0-3>
//		</h>
  _WDWORD(0x4c000004, 0x00043011);   // MPLLCON//复位0x00096030   0x0005C011

//		<h>UPLLCON: USB时钟寄存器控制
//		<i> FOUT = m*Fin/(p*2^s)  Fvco = m*Fin/p  
//		<i> m=MDIV + 8  p = PDIV + 2  s = SDIV
//		<i> 600MHz<= Fvco <= 1.2GHz   200MHz <= Fout <= 600MHz
//		<o1.12..19> MDIV: 锁相环倍频数<9-256><#-8>
//		<o1.4..9>   PDIV: 锁相环预分频数 <3-64><#-2>
//		<o1.0..1>   SDIV: 锁相环后分频数 <0-3>
//		</h>
  _WDWORD(0x4c000008, 0x00038021);   // UPLLCON   0x00038022


//		<h>CLKCON: 时钟控制寄存器
//		<i> 控制各外设时钟  
//		<o1.20> AC97: 允许PCLK进入AC97模块
//		<o1.19> Camera: 允许HCLK进入Camera模块
//		<o1.18> SPI: 允许PCLK进入SPI模块

//		<o1.17> IIS: 允许PCLK进入IIS模块

//		<o1.16> IIC: 允许PCLK进入IIC模块

//		<o1.15> ADC: 允许PCLK进入ADC(&Touch screen)模块

//		<o1.14> RTC: 允许PCLK进入RTC模块

//		<o1.13> GPIO: 允许PCLK进入GPIO模块

//		<o1.12> UART2: 允许PCLK进入UART2模块

//		<o1.11> UART1: 允许PCLK进入UART1模块

//		<o1.10> UART0: 允许PCLK进入UART0模块

//		<o1.9> SDI: 允许PCLK进入SDI模块

//		<o1.8> PWMTIMER: 允许PCLK进入PWMTIMER模块

//		<o1.7> USB Device: 允许PCLK进入USB Device模块

//		<o1.6> USB Host: 允许HCLK进入USB Host模块

//		<o1.5> LCDC: 允许HCLK进入LCDC模块

//		<o1.4> NAND Flash controller: 允许HCLK进入NAND Flash controller模块

//		<o1.3> SLEEP: 让单片机进入SLEEP模式

//		<o1.2> IDLE: 让单片机进入IDLE模式,此位不能自动清除。

//		</h>
  _WDWORD(0x4c00000C, 0x001FFFF0);   // CLKCON  0x00FFFFF0


//		<h>CLKSLOW: 慢速时钟控制寄存器
//		<i> 控制慢速时钟模式  
//		<o1.7> UPLL_OFF: 关闭UPLL，仅当SLOW_IBT为1时才会关闭MPLL.打开时会自动插入稳定时间。
//		<o1.5> MPLL_OFF: 关闭MPLL，仅当SLOW_IBT为1时才会关闭MPLL.打开时会自动插入稳定时间。
//		<o1.4> SLOW_BIT: 慢速模式开启
//		<o1.0..2> SLOW_VAL:慢速模式分频值
//	<0=> FCLK = EXTCLK or XTlpll/1 ; HCLK = FCLK(HDIVN = 0)/(FCLK/2(HDIVN = 1));PCLK = HCLK(PDIVN = 0)/HCLK/2(PDIVN = 1);UCLK = 48MHz
//	<1=> FCLK = EXTCLK or XTlpll/2 ; HCLK = FCLK(HDIVN = 0)/(FCLK/2(HDIVN = 1));PCLK = HCLK(PDIVN = 0)/HCLK/2(PDIVN = 1);UCLK = 48MHz
//	<2=> FCLK = EXTCLK or XTlpll/4 ; HCLK = FCLK(HDIVN = 0)/(FCLK/2(HDIVN = 1));PCLK = HCLK(PDIVN = 0)/HCLK/2(PDIVN = 1);UCLK = 48MHz
//	<3=> FCLK = EXTCLK or XTlpll/6 ; HCLK = FCLK(HDIVN = 0)/(FCLK/2(HDIVN = 1));PCLK = HCLK(PDIVN = 0)/HCLK/2(PDIVN = 1);UCLK = 48MHz
//	<4=> FCLK = EXTCLK or XTlpll/8 ; HCLK = FCLK(HDIVN = 0)/(FCLK/2(HDIVN = 1));PCLK = HCLK(PDIVN = 0)/HCLK/2(PDIVN = 1);UCLK = 48MHz
//	<5=> FCLK = EXTCLK or XTlpll/10; HCLK = FCLK(HDIVN = 0)/(FCLK/2(HDIVN = 1));PCLK = HCLK(PDIVN = 0)/HCLK/2(PDIVN = 1);UCLK = 48MHz
//	<6=> FCLK = EXTCLK or XTlpll/12; HCLK = FCLK(HDIVN = 0)/(FCLK/2(HDIVN = 1));PCLK = HCLK(PDIVN = 0)/HCLK/2(PDIVN = 1);UCLK = 48MHz
//	<7=> FCLK = EXTCLK or XTlpll/14; HCLK = FCLK(HDIVN = 0)/(FCLK/2(HDIVN = 1));PCLK = HCLK(PDIVN = 0)/HCLK/2(PDIVN = 1);UCLK = 48MHz
//		</h>
  _WDWORD(0x4c000010, 0x00000004);   // CLKSLOW

//		<h>CAMIVN: 摄像头时钟分频器控制寄存器
//		<i> 控制摄像头时钟分频和HCLK分频（默认：0X00000000)  
//		<o1.12> DVS_EN: ARM核时钟选择
//		<0=> ARM核正常工作时钟FCLK为MPLL输出
//		<1=> ARM核工作系统时钟FCLK为HCLK
//		<o1.9> HCLK4_HALF: 在HDIVN为2的时候，将HCLK设置为8分频。
//		<o1.8> HCLK3_HALF: 在HDIVN为3的时候，将HCLK设置为6分频。
//		<o1.4> CAMCLK_SEL: 选择摄像头的工作时钟
//		<0=> 用UPLL输出做为摄像头的工作时钟
//		<1=> 用UPLL经过CAMCLK_DIVN分频后的时钟做工作时钟。
//		<o1.0..3> CAMCLK_DIVN: 摄像头的工作时钟分频<0-15>
//		<i> 摄像头时钟CAMCLK = UPLL/((CAMCLK_DIVN + 1)*2)
//		</h>
  _WDWORD(0x4c000018, 0x00000000);   // CAMDIVN

//</h>

// <h> 外部存贮器控制器设置
//   <h> DRAM 控制器

//     <h> BWSCON: 总线宽度和等待控制寄存器
//       <o1.28..29>  DW7: BANK7总线宽度
//         <0=> 8位  <1=> 16位  <2=> 32位  <3=> Reserved
//       <o1.24..25>  DW6: BANK6总线宽度
//         <0=> 8位  <1=> 16位  <2=> 32位  <3=> Reserved
//     </h>
  _WDWORD(0x48000000, 0x22000000);   // BWSCON  0x2201D112
//  _WDWORD(0x48000004, 0x00000700);   // BANKCON0
//  _WDWORD(0x48000008, 0x00000700);   // BANKCON1
//  _WDWORD(0x4800000C, 0x00000700);   // BANKCON2
//  _WDWORD(0x48000010, 0x00001F4C);   // BANKCON3
//  _WDWORD(0x48000014, 0x00000700);   // BANKCON4
//  _WDWORD(0x48000018, 0x00000700);   // BANKCON5

//     <h> BANKCON6: BANK6控制寄存器
//       <o1.15..16>  MT: 定义存贮器类型
//        <0=> SRAM或者是ROM
//		  <1=> Reserved
//		  <2=> Reserved
//		  <3=> (Sync)DRAM
//       <o1.13..14>  Tacs: nGCSn 前的地址建立时间
//        <0=> 0个时钟
//		  <1=> 1个时钟
//		  <2=> 2个时钟
//		  <3=> 4个时钟
//       <o1.11..12>  Tcos: nOE 前的片选建立时间
//        <0=> 0个时钟
//		  <1=> 1个时钟
//		  <2=> 2个时钟
//		  <3=> 4个时钟
//       <o1.8..10>  Tacc: 访问时间
//        <0=> 1个时钟
//		  <1=> 2个时钟
//		  <2=> 3个时钟
//		  <3=> 4个时钟
//        <4=> 6个时钟
//		  <5=> 8个时钟
//		  <6=> 10个时钟
//		  <7=> 14个时钟
//       <o1.6..7>  Tcoh: nOE 后的片选建立时间
//        <0=> 0个时钟
//		  <1=> 1个时钟
//		  <2=> 2个时钟
//		  <3=> 4个时钟
//       <o1.4..5>  Tach: nGCSn 后的地址建立时间
//        <0=> 0个时钟
//		  <1=> 1个时钟
//		  <2=> 2个时钟
//		  <3=> 4个时钟
//		<h> 在非SDRAM模式下的配置
//       <o1.2..3>  Tacp: 页模式下的访问周期
//        <0=> 2个时钟
//		  <1=> 3个时钟
//		  <2=> 4个时钟
//		  <3=> 6个时钟
//       <o1.0..1>  PMC: 页模式配置
//        <0=> 1个数据
//		  <1=> 4个数据
//		  <2=> 8个数据
//		  <3=> 16个数据
//		</h>
//		<h> 在SDRAM(4-bit)模式下的配置
//       <o1.2..3>  Trcd: RAS to CAS的延时
//        <0=> 2个时钟
//		  <1=> 3个时钟
//		  <2=> 4个时钟
//       <o1.0..1>  SCAN: 列地址位数
//        <0=> 8位
//		  <1=> 9位
//		  <2=> 10位
//		</h>
//     </h>
  _WDWORD(0x4800001C, 0x00018005);   // BANKCON6

//     <h> BANKCON7: BANK7控制寄存器
//       <o1.15..16>  MT: 定义存贮器类型
//        <0=> SRAM或者是ROM
//		  <1=> Reserved
//		  <2=> Reserved
//		  <3=> (Sync)DRAM
//       <o1.13..14>  Tacs: nGCSn 前的地址建立时间
//        <0=> 0个时钟
//		  <1=> 1个时钟
//		  <2=> 2个时钟
//		  <3=> 4个时钟
//       <o1.11..12>  Tcos: nOE 前的片选建立时间
//        <0=> 0个时钟
//		  <1=> 1个时钟
//		  <2=> 2个时钟
//		  <3=> 4个时钟
//       <o1.8..10>  Tacc: 访问时间
//        <0=> 1个时钟
//		  <1=> 2个时钟
//		  <2=> 3个时钟
//		  <3=> 4个时钟
//        <4=> 6个时钟
//		  <5=> 8个时钟
//		  <6=> 10个时钟
//		  <7=> 14个时钟
//       <o1.6..7>  Tcoh: nOE 后的片选建立时间
//        <0=> 0个时钟
//		  <1=> 1个时钟
//		  <2=> 2个时钟
//		  <3=> 4个时钟
//       <o1.4..5>  Tach: nGCSn 后的地址建立时间
//        <0=> 0个时钟
//		  <1=> 1个时钟
//		  <2=> 2个时钟
//		  <3=> 4个时钟
//		<h> 在非SDRAM模式下的配置
//       <o1.2..3>  Tacp: 页模式下的访问周期
//        <0=> 2个时钟
//		  <1=> 3个时钟
//		  <2=> 4个时钟
//		  <3=> 6个时钟
//       <o1.0..1>  PMC: 页模式配置
//        <0=> 1个数据
//		  <1=> 4个数据
//		  <2=> 8个数据
//		  <3=> 16个数据
//		</h>
//		<h> 在SDRAM(4-bit)模式下的配置
//       <o1.2..3>  Trcd: RAS to CAS的延时
//        <0=> 2个时钟
//		  <1=> 3个时钟
//		  <2=> 4个时钟
//       <o1.0..1>  SCAN: 列地址位数
//        <0=> 8位
//		  <1=> 9位
//		  <2=> 10位
//		</h>
//     </h>
  _WDWORD(0x48000020, 0x00018005);   // BANKCON7

//     <h> REFRESH: 刷新控制寄存器
//       <o1.23>  REFEN: SDRAM 刷新使能
//        <0=> 无效
//		  <1=> 有效（自身 CBR/自动刷新）
//		<i>CBR (CAS Before RAS,列提前于行定位方式刷新）
//       <o1.22>  TREFMD: SDRAM刷新模式
//        <0=> CBR/自动刷新
//		  <1=> 自刷新模式
//		<i>在自刷新模式下，SDRAM控制信号被置于适当的电平
//       <o1.20..21>  Trp: SDRAM RAS 预充电时间
//        <0=> 2个时钟
//		  <1=> 3个时钟
//		  <2=> 4个时钟
//       <o1.18..19>  Tsrc: SDRAM 半行周期时间
//		<i>SDRAM 行周期时间Trc = Tsrc + Trp 
//        <0=> 4个时钟
//		  <1=> 5个时钟
//		  <2=> 6个时钟
//		  <3=> 7个时钟
//       <o1.0..10>  Refresh Counter:SDRAM 刷新计数器<0-2047>
//		<i>刷新时间：（2^11 - Refresh Counter + 1)/HCLK
//     </h>
  _WDWORD(0x48000024, 0x008404F3);   // REFRESH  0x008E04F4

//     <h> BANKSIZE: 块尺寸控制寄存器
//       <o1.7>  BURST_EN: ARM 突发操作使能
//        <0=> 无效
//		  <1=> 有效（允许突发操作）
//       <o1.5>  SCKE_EN: 使能SDRAM掉电模式
//        <0=> SDRAM掉电模式无效
//		  <1=> SDRAM掉电模式有效
//       <o1.4>  SCLK_EN: SCLK仅在访问SDRAM时有效，没有访问的时候，SCLK保持低电平，减少能量损耗
//        <0=> SCLK总是有效
//		  <1=> SCLK仅在访问SDRAM时有效（推荐）
//       <o1.0..2>  BANK76MAP: BANK67存储器分布情况（块尺寸）
//        <0=> 32M/32M
//		  <1=> 64M/64M
//		  <2=> 128M/128M
//        <4=> 2M/2M
//		  <5=> 4M/4M
//		  <6=> 8M/8M
//		  <7=> 16M/16M
//     </h>
  _WDWORD(0x48000028, 0x00000031);   // BANKSIZE

//     <h> MRSRB6: BANK6模式寄存器
//       <o1.4..6>  CL: CAS反应时间（潜伏期）
//        <0=> 1个周期
//		  <2=> 2个周期
//        <3=> 3个周期
//     </h>
  _WDWORD(0x4800002C, 0x00000020);   // MRSRB6

//     <h> MRSRB7: BANK7模式寄存器
//       <o1.4..6>  CL: CAS反应时间（潜伏期）
//        <0=> 1个周期
//		  <2=> 2个周期
//        <3=> 3个周期
//     </h>
  _WDWORD(0x48000030, 0x00000020);   // MRSRB7

//   </h>
// </h>

  _WDWORD(0x56000000, 0x00000FFF);      // GPACON: Enable Address lines for SDRAM

}



FUNC void SetupForStart (void) {

// <o> Program Entry Point
  PC = 0x30000000;
}

//MAP 0x30000000,0x307FFFFF READ EXEC         // External ROM
//MAP 0x30800000,0x33ffFFFF READ WRITE EXEC   // External RAM

//MAP 0x48000000,0x567FFFFF READ EXEC  WRITE        

//_WDWORD(0x40000000, 0xEAFFFFFE);        // Load RAM addr 0 with branch to itself
_WDWORD(0x00000000, 0xEAFFFFFE);        // Load RAM addr 0 with branch to itself
CPSR = 0x000000D3;                      // Disable interrupts
//PC   = 0x40000000;                      // Position PC to start of RAM
PC   = 0x00000000;                      // Position PC to start of RAM
_WDWORD(0x53000000, 0x00000021);        // Enable Watchdog
g, 0                                    // Wait for Watchdog to reset chip


Setup();                             // Setup for Downlaod

//exec("LOAD DRAM\控制器.axf INCREMENTAL");     // Download
LOAD obj\RTT_TQ2440.axf INCREMENTAL     // Download
SetupForStart();                        // Setup for Running

g, main
